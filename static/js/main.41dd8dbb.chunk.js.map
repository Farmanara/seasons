{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","console","log","className","Spinner","message","App","state","err","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","this","React","Component","ReactDOM","render","document","querySelector"],"mappings":"sMAGMA,G,MAAe,CACjBC,OAAQ,CACJC,KAAK,uBACLC,SAAS,OAGbC,OAAQ,CACJF,KAAK,mBACLC,SAAS,eA+BFE,EAhBM,SAACC,GACpB,IAViBC,EAAIC,EAUfC,GAVWF,EAUQD,EAAMC,IATvB,GADaC,GAUc,IAAIE,MAAOC,aAT3BH,EAAM,EAEfD,EAAI,EAAI,SAAW,SAEfA,EAAK,EAAI,SAAW,UAMlCK,QAAQC,IAAIb,EAAaS,IAFG,MAGJT,EAAaS,GAA/BP,EAHsB,EAGtBA,KAAMC,EAHgB,EAGhBA,SACV,OAGI,yBAAKW,UAAS,UAAKL,EAAL,qBACV,uBAAGK,UAAS,UAAKX,EAAL,6BACZ,gCAAMD,GACN,uBAAGY,UAAS,UAAKX,EAAL,iCC1BTY,EARA,SAACT,GACZ,OACI,yBAAKQ,UAAU,oBACX,yBAAKA,UAAW,sBAAsBR,EAAMU,WCAlDC,E,2MAIFC,MAAO,CAACX,IAAK,KAAKY,IAAI,I,mFACD,IAAD,OAEhBC,OAAOC,UAAUC,YAAYC,oBACzB,SAAAC,GAAQ,OAAI,EAAKC,SAAS,CAAClB,IAAMiB,EAASE,OAAOC,cACjD,SAAAR,GAAG,OAAI,EAAKM,SAAS,CAACN,IAAKA,EAAIH,e,+BAQrC,OAAKY,KAAKV,MAAMX,KAAOqB,KAAKV,MAAMC,IACvB,yCAAeS,KAAKV,MAAMC,KAEjCS,KAAKV,MAAMX,MAAQqB,KAAKV,MAAMC,IACvB,kBAAC,EAAD,CAAeZ,IAAKqB,KAAKV,MAAMX,MAEnC,kBAAC,EAAD,CAASS,QAAQ,8C,GAvBZa,IAAMC,WA2BxBC,IAASC,OAAO,kBAAC,EAAD,MAAOC,SAASC,cAAc,W","file":"static/js/main.41dd8dbb.chunk.js","sourcesContent":["import './SeasonDisplay.css'\nimport React from 'react';\n\nconst seasonConfig = {\n    summer: {\n        text:'Let\\'s hit the beach!' ,\n        iconName:'sun',\n\n    },\n    winter: {\n        text:'Burr it is cold!',\n        iconName:'snowflake'\n    },\n    \n\n}\n\nconst getSeason = (lat,month)=> {\n    if (  2<month && month<9 ){\n\n     return lat>0 ? 'summer' : 'winter' }\n     else {\n         return lat >0 ? 'winter' : 'summer';\n     }\n}\n\nconst SeasonDisplay =(props)=>{\n  const season = getSeason(props.lat,new Date().getMonth());\n  console.log(seasonConfig[season]);\n const {text, iconName} = seasonConfig[season];\n    return(\n                    //check out semantic ui website , icon section , code examples\n\n        <div className={`${season} season-display ` }>\n            <i className={`${iconName} icon massive icon-left` }/>\n            <h1> {text}</h1>\n            <i className={`${iconName} icon massive icon-right` }/>\n\n        </div>\n    );\n    \n    };\nexport default SeasonDisplay;","import React from 'react';\n\nconst Spinner =(props) => {\n    return (\n        <div className=\"ui active dimmer\">\n            <div className= \"ui big text loader\">{props.message}</div>\n        </div>\n\n    );\n};\nexport default Spinner;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport SeasonDisplay from './SeasonDisplay';  \nimport Spinner from './Spinner';\n\nclass App extends React.Component{\n    //JS specific function, in a JS class , this constructor function is called every time that the class is created. \n    // so it is the best place to initialize our  react state\n  \n    state= {lat: null,err:''}\n    componentDidMount() {\n\n        window.navigator.geolocation.getCurrentPosition(\n            position => this.setState({lat : position.coords.latitude}),\n            err => this.setState({err :err.message}));\n        \n\n    }\n\n    //React says we have to define render!!\n    render(){\n        \n      if (!this.state.lat && this.state.err) {\n          return <div> Error : {this.state.err}</div>\n      }\n      if (this.state.lat && !this.state.err) {\n          return <SeasonDisplay lat={this.state.lat}/>;\n      }\n      return <Spinner message='Please accept the location request :)' / >\n    }\n}\n\nReactDOM.render(<App/>,document.querySelector('#root'));\n"],"sourceRoot":""}